from __future__ import annotations

import os
import random
from typing import Optional, List, Tuple
from boofuzz import Block, Delim, Request, Session, Static, String
from pyradamsa import Radamsa

from netfuzz.core.base import Base


class State:
    def __init__(self) -> None:
        self.state = "INITIAL"
        self.rules = {
            "INITIAL": {"USER": "WAIT_PASS"},
            "WAIT_PASS": {"PASS": "AUTHENTICATED"},
            "AUTHENTICATED": {
                "CWD": "AUTHENTICATED",
                "MKD": "AUTHENTICATED",
                "RMD": "AUTHENTICATED",
                "DELE": "AUTHENTICATED",
                "RETR": "DATA_TRANSFER",
                "STOR": "DATA_TRANSFER",
                "RNFR": "WAIT_RNTO",
                "QUIT": "INITIAL",
                "SITE": "AUTHENTICATED",
                "STAT": "AUTHENTICATED",
                "HELP": "AUTHENTICATED",
            },
            "WAIT_RNTO": {"RNTO": "AUTHENTICATED"},
            "DATA_TRANSFER": {"ABOR": "AUTHENTICATED"},
        }

    def get_next_state(self, command: str) -> str:
        return self.rules.get(self.state, {}).get(command, "INVALID")

    def update_state(self, command: str) -> None:
        next_state = self.get_next_state(command)
        if next_state != "INVALID":
            print(f"State changed: {self.state} -> {next_state}")
            self.state = next_state
        else:
            print(f"Invalid state transition: {self.state} with command {command}")

    def get_allowed_commands(self) -> List[str]:
        """현재 상태에서 허용되는 명령어를 반환."""
        return list(self.rules.get(self.state, {}).keys())


class FTP(Base):
    def __init__(self) -> None:
        super().__init__("FTP")
        self.path = "/home/phantom"
        self.radamsa = Radamsa()
        self.state = State()
        self.update_commands_with_files()

    def initialize(self, session: Session) -> None:
        """Boofuzz 세션을 초기화하고 동적 명령어 생성을 통해 Fuzzing 테스트."""
        previous_request = None

        # 초기 USER, PASS 명령어로 인증 절차 수행
        for cmd, arg in [("USER", "ftp"), ("PASS", "ftp")]:
            req = self.generate_packet(cmd, arg)
            session.connect(session.root, req)
            previous_request = req
            self.state.update_state(cmd)

        # 동적 명령어 생성 및 테스트
        for _ in range(10):  # 10번의 테스트 케이스 생성
            cmd, arg = self.dynamic_command_generation()
            if self.state.get_next_state(cmd) != "INVALID":
                dynamic_arg = self.generate_radamsa_argument(cmd, arg)
                req = self.generate_packet(cmd, dynamic_arg)
                session.connect(previous_request, req)
                self.state.update_state(cmd)
                previous_request = req

    def dynamic_command_generation(self) -> Tuple[str, Optional[str]]:
        """현재 상태에서 사용할 수 있는 명령어를 동적으로 선택하여 인자를 생성."""
        allowed_commands = self.state.get_allowed_commands()
        if not allowed_commands:
            raise ValueError(f"현재 상태 {self.state.state}에서 사용할 수 있는 명령어가 없습니다.")

        # 허용된 명령어 중 랜덤으로 선택
        cmd = random.choice(allowed_commands)

        # 명령어에 따른 기본 인자 값 설정
        if cmd == "CWD":
            arg = "/tmp/test_dir"
        elif cmd == "MKD":
            arg = "/tmp/new_dir"
        elif cmd == "DELE":
            arg = "delete_file.txt"
        elif cmd in ["RETR", "STOR"]:
            arg = "test_file.txt"
        elif cmd in ["RNFR", "RNTO"]:
            arg = "rename_file.txt"
        elif cmd == "SITE":
            arg = "CHMOD 755 test.txt"
        else:
            arg = None  # 인자가 필요 없는 명령어

        return cmd, arg

    def generate_radamsa_argument(self, cmd: str, base_value: Optional[str], seed: Optional[int] = None) -> str:
        """pyradamsa를 사용하여 동적으로 변형된 인자 값을 생성."""
        if base_value is None:
            base_value = "default"
        radamsa_options = {"seed": seed}
        mutated_value = self.radamsa.fuzz(base_value.encode(), **radamsa_options)
        return mutated_value.decode("utf-8")

    def generate_packet(self, cmd: str, arg: Optional[str] = None) -> Request:
        """Boofuzz 패킷 생성."""
        if arg is None:
            block = Block(name="Command", children=[String(name="command", default_value=cmd)])
        else:
            block = Block(
                name="Command",
                children=(
                    String(name="command", default_value=cmd),
                    Delim(name="space", default_value=" ") if arg else None,
                    String(name="argument", default_value=arg) if arg else None,
                ),
            )
        return Request(name=cmd.lower(), children=(block, Static(name="end", default_value="\r\n")))

    def scan_directory_files(self) -> list[str]:
        """디렉토리에서 테스트에 사용할 파일 목록을 스캔."""
        if not os.path.isdir(self.path):
            raise ValueError(f"유효하지 않은 디렉토리 경로: {self.path}")
        return [f for f in os.listdir(self.path) if os.path.isfile(os.path.join(self.path, f))]

    def update_commands_with_files(self) -> None:
        """디렉토리의 파일 목록을 기반으로 명령어 인자를 업데이트."""
        files = self.scan_directory_files()
        self.files = files if files else ["default.txt"]
